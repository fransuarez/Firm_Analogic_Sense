Tareas proximas TP profesional:
----------------------------------------

1- Funcion que tome un dato de consola y lo utlice para dato de simulacion de la funcion.  > NO ahora
2- Funcion de de test que al ejecutarla muestre entrada y resultado de validacion de calculos  >  Por ahora tengo las del test.
	(repo tien lib de operaciones matematicas dsp).
3- Funcion que permita tomar un archivo para el procesamiento de datos continuos. 
	(ver si sirve ahora, el repo tiene librerias de manejo de archivos)
5- Funcion que muestre el monitoreo de valores de entradas analogicas.
4- Funcion que arme una tabla con valores de distintas entradas y salidas configurables. Es a modo de visualización por terminal. > NO ahora

5- Implementar la comunicacion a traves de colas entre las tareas no usar espacios/funciones comunes porque esto viola el concepto de alcance
de cada tarea.
6- Implementar listas enlazadas con los datos a escribir en memoria EEPROM con la info de los GPIOS. 
   Se van a ir actualizando, aumentando o acortando en funcion de los datos nuevos recibidios y la cantidad de memoria disponible.


Pasos:
--------
1- Agregar a GPIO_Manager (por ponerle un nombre) las entradas analogicas 0 y 1. > Hecho
2_a- Soldar los pines al edu ciaa y armar algun divisor resistivo mas un potenciometro. > Hecho
2_b- Variar la tension en dichas entradas y procesar sus valores con las funciones de señal. > Hecho
3- Agregar al comando estado el monitoreo constante de las entradas.  
	Esto se debera hacer cada 3 segundos y solo con las IO activadas.
4- Implementar el reloj RTC o como se llame el periferico, para registrar en el log.

5- Implementar el guardado de N registros por vez en memoria (en principio voy a usar la eeprom interna).
   Tips:
	.Esto se debera a hacer cada 1 minuto o mas ya que los procesos son lentos. 
	.Solo debe usar una pequeña porcion de la memoria disponible.
	.La cantidad de registros grabados se indicara en el haeder del espacio de archivo. 
	.Se podria usar formato FAT que ya predefine este tipo de cosas.  > Muy pesado para una eeprom > NO
	.Al momento de llegar al final del archivo se comenzara a reescribir desde el principio? 
	 Si es asi seria conveniente tener un registro de principio de registros y final. 
	.Se lo puede pensar como una lista enlazada pero suponiendo cada registro una posicion unica.
	
	No hace falta, con solo colocar un registro detras del otro es suficiente ya que no se haran borrados entre medio de la lista.
	
6- Agregar algoritmos para medir conductividad en el primer modelo.¿? Por el momento hacerlo medio hardcodeado. > NO

7- Reservar una arreglo con objetos GPIO con sus valores anterior y actual. 
   Tambien con un parametro de activacion, y estado de salud.
8- Los periodos de las tareas se manejaran con delay internos y timeouts. En funcion del estado donde este cada tarea determinara los delay para 
   la proxima llamada a la misma. De este modo se puede gestionar cuando ejecutar cada una.
	Ver rutina: void FreeRTOSDelay (uint32_t ms)

9- Los timers los puedo usar para las tareas programadas. Serian utiles en casos donde se debe activar una accion repetitiva o una alarma.
   Usarlo para implementar debounce de las teclas si quiero usar esa modalidad.

Nota 1: armar un nuevo proyecto para independizarlo del de test de consola que esta bueno asi como esta. > Hecho
Nota 2: Ver los cambios/updates en las funciones del repo de Ridolfi
Nota 3: Mover las funciones drivers de señales GPIO a la libreria correspondiente. > Hecho

-------------------------------------------------------------------------------------------------------------------------------------------
Obs 1: Pensar siempre como una implementacion alejada lo mas posible de este RTOS. 
Obs 2: El manejo de variables deberia ser lo mas local posible a cada modulo. -> lo ideal seria que pudieran existir de modo indepndiente cada una!


Open OCD 
--------------
RUN -> CMD -> CD C:\Users\fran\Desktop\proyecto_final\Firm_Analogic_Sense\
make openocd 
Nota: usar el puerto USB primero de la izquierda. Sino hay que reconfigurar los drivers para los otros puertos.

EEPROM
-----------
Además de los comandos IAP que te permite escribir en la memoria flash, el LPC4337 tiene una memoria EEPROM de 16kB. 
Con LPCOpen se usa así (ojo no está 100% probado):

/* dirección de la palabra a escribir */

	uint32_t * pEEData = (uint32_t *)EEPROM_ADDRESS(0, 4); 

	Chip_EEPROM_Init( LPC_EEPROM );

/* programar la EEPROM */

	Chip_EEPROM_SetAutoProg( LPC_EEPROM,  EEPROM_AUTOPROG_AFT_1WORDWRITTEN );
	*pEEData = 0xABCDEF01;

	Chip_EEPROM_WaitForIntStatus( LPC_EEPROM, EEPROM_INT_ENDOFPROG );
	
/* para borrar */

	Chip_EEPROM_EraseProgramPage( LPC_EEPROM );

	
Links tips freeRTOS:
--------------------------
https://www.freertos.org/RTOS-software-timer.html
https://www.freertos.org/FreeRTOS_Support_Forum_Archive/March_2011/freertos_LPC_1758_1768_IAP_In_Application_Programming_4432785.html
https://www.freertos.org/FreeRTOS-Coding-Standard-and-Style-Guide.html#NamingConventions
http://web.ist.utl.pt/~ist11993/FRTOS-API/group___timer.html#pvTimerGetTimerID
https://community.nxp.com/docs/DOC-332152

8-10 	(0 a 2 meses) 	6 kg >> 9 x30x2	= 360 > Chicos
7-8		(2 a 3 meses) 	7 kg >> 7,5 x31	= 232
6-8		(3 a 4 meses)	8 kg >> 7 x30	= 210
4-5 	(4 a 5 meses)	8 kg >> 4,5 x30	= 135
										= 580 > Medianos



